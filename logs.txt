/Library/Developer/CommandLineTools/usr/bin/make clean-frontend-volume ensure-secret-files
docker compose down --remove-orphans
docker volume rm --force ft-transcendence_frontend
ft-transcendence_frontend
rm -f -r ./.secrets/
Compose can now delegate builds to bake for better performance.
 To do so, set COMPOSE_BAKE=true.
#0 building with "desktop-linux" instance using docker driver

#1 [vault internal] load build definition from Dockerfile
#1 transferring dockerfile: 723B done
#1 DONE 0.0s

#2 [vault internal] load metadata for docker.io/hashicorp/vault:1.19.0
#2 DONE 0.5s

#3 [vault internal] load .dockerignore
#3 transferring context: 174B done
#3 DONE 0.0s

#4 [vault 1/8] FROM docker.io/hashicorp/vault:1.19.0@sha256:bbb7f98dc67d9ebdda1256de288df1cb9a5450990e48338043690bee3b332c90
#4 DONE 0.0s

#5 [vault internal] load build context
#5 transferring context: 786B done
#5 DONE 0.0s

#6 [vault 6/8] COPY ./replace_json_templates.py /replace_json_templates.py
#6 CACHED

#7 [vault 2/8] RUN apk add --no-cache jq python3 gettext
#7 CACHED

#8 [vault 7/8] COPY ./healthcheck.sh /healthcheck.sh
#8 CACHED

#9 [vault 4/8] RUN envsubst < /vault/config/config.hcl.template > /vault/config/config.hcl
#9 CACHED

#10 [vault 3/8] COPY ./config.hcl.template /vault/config/config.hcl.template
#10 CACHED

#11 [vault 5/8] COPY ./entrypoint.sh /entrypoint.sh
#11 CACHED

#12 [vault 8/8] COPY ./policies/ /vault/policies/
#12 CACHED

#13 [vault] exporting to image
#13 exporting layers done
#13 writing image sha256:13a18fa2b9a7c9a7e3bb28882133e4f770197473469612a6d4afd54cf8089ee2 done
#13 naming to docker.io/library/ft-transcendence-vault done
#13 DONE 0.0s

#14 [vault] resolving provenance for metadata file
#14 DONE 0.0s

#15 [backend internal] load build definition from Dockerfile
#15 transferring dockerfile: 487B done
#15 DONE 0.0s

#16 [backend internal] load metadata for docker.io/library/node:23.9.0-alpine3.21
#16 DONE 0.6s

#17 [backend internal] load .dockerignore
#17 transferring context: 188B done
#17 DONE 0.0s

#18 [backend 1/6] FROM docker.io/library/node:23.9.0-alpine3.21@sha256:dc4d20572e425f9d4c68a6f9c382fbcfec3fa2f8ef0b12cb1d96feabdb479a48
#18 DONE 0.0s

#19 [backend internal] load build context
#19 transferring context: 9.45kB 0.0s done
#19 DONE 0.0s

#20 [backend 4/6] COPY ./package*.json ./
#20 CACHED

#21 [backend 5/6] RUN npm clean-install
#21 CACHED

#22 [backend 2/6] WORKDIR /backend/
#22 CACHED

#23 [backend 3/6] RUN apk add --no-cache curl
#23 CACHED

#24 [backend 6/6] COPY . .
#24 CACHED

#25 [backend] exporting to image
#25 exporting layers done
#25 writing image sha256:f9f67a51da1c56371b3f2c421b2a6996cd2a4a173d50c1d08e0b36b7648fed90 done
#25 naming to docker.io/library/ft-transcendence-backend done
#25 DONE 0.0s

#26 [backend] resolving provenance for metadata file
#26 DONE 0.0s

#27 [frontend internal] load build definition from Dockerfile
#27 transferring dockerfile: 314B done
#27 DONE 0.0s

#16 [frontend internal] load metadata for docker.io/library/node:23.9.0-alpine3.21
#16 DONE 0.8s

#28 [frontend internal] load .dockerignore
#28 transferring context: 188B done
#28 DONE 0.0s

#18 [frontend 1/6] FROM docker.io/library/node:23.9.0-alpine3.21@sha256:dc4d20572e425f9d4c68a6f9c382fbcfec3fa2f8ef0b12cb1d96feabdb479a48
#18 DONE 0.0s

#29 [frontend internal] load build context
#29 transferring context: 13.21kB 0.0s done
#29 DONE 0.0s

#30 [frontend 2/6] WORKDIR /frontend/
#30 CACHED

#31 [frontend 3/6] COPY ./package*.json ./
#31 CACHED

#32 [frontend 5/6] COPY ./ ./
#32 CACHED

#33 [frontend 4/6] RUN npm clean-install
#33 CACHED

#34 [frontend 6/6] RUN npm run build
#34 CACHED

#35 [frontend] exporting to image
#35 exporting layers done
#35 writing image sha256:a61432808698bba4b64bc3cf345610227ad576b9b0eff5e74b92ca30ed1f3843 done
#35 naming to docker.io/library/ft-transcendence-frontend done
#35 DONE 0.0s

#36 [frontend] resolving provenance for metadata file
#36 DONE 0.0s

#37 [caddy internal] load build definition from Dockerfile
#37 transferring dockerfile: 1.08kB done
#37 DONE 0.0s

#38 [caddy internal] load metadata for docker.io/library/caddy:2.9.1-builder-alpine
#38 DONE 0.5s

#39 [caddy internal] load metadata for docker.io/library/alpine:3.21.3
#39 DONE 0.5s

#40 [caddy internal] load .dockerignore
#40 transferring context: 174B done
#40 DONE 0.0s

#41 [caddy builder 1/5] FROM docker.io/library/caddy:2.9.1-builder-alpine@sha256:0d51ab53402e144be9cab449f5adfec681b87d481dcd175230813427d5e00f00
#41 DONE 0.0s

#42 [caddy stage-1 1/8] FROM docker.io/library/alpine:3.21.3@sha256:a8560b36e8b8210634f77d9f7f9efd7ffa463e380b75e2e74aff4511df3ef88c
#42 DONE 0.0s

#43 [caddy internal] load build context
#43 transferring context: 68B done
#43 DONE 0.0s

#44 [caddy stage-1 3/8] COPY --from=builder      /etc/passwd /etc/passwd
#44 CACHED

#45 [caddy stage-1 4/8] COPY --from=builder      /etc/group /etc/group
#45 CACHED

#46 [caddy builder 4/5] RUN addgroup caddy
#46 CACHED

#47 [caddy stage-1 2/8] COPY --from=builder      /usr/bin/caddy /usr/bin/caddy
#47 CACHED

#48 [caddy stage-1 6/8] RUN rm -rf /frontend/ && mkdir -p /frontend/.local/share/caddy/
#48 CACHED

#49 [caddy builder 3/5] RUN CGO_ENABLED=1 XCADDY_GO_BUILD_FLAGS="-ldflags='-linkmode external -extldflags -static'" 	xcaddy build --with github.com/corazawaf/coraza-caddy/v2
#49 CACHED

#50 [caddy stage-1 5/8] COPY --chown=caddy:caddy ./Caddyfile /etc/caddy/Caddyfile
#50 CACHED

#51 [caddy stage-1 7/8] RUN chown -R caddy:caddy /frontend/
#51 CACHED

#52 [caddy builder 2/5] RUN apk update && apk add build-base
#52 CACHED

#53 [caddy builder 5/5] RUN adduser -h /frontend/ -S caddy -G caddy
#53 CACHED

#54 [caddy stage-1 8/8] WORKDIR /frontend/
#54 CACHED

#55 [caddy] exporting to image
#55 exporting layers done
#55 writing image sha256:55d737aa6f07df3c57659e2633a27b3bc3f00d9705f88f409c0eaab681208a4f done
#55 naming to docker.io/library/ft-transcendence-caddy done
#55 DONE 0.0s

#56 [caddy] resolving provenance for metadata file
#56 DONE 0.0s
[92m        â¦¿ [0mWatch enabled
Attaching to backend, caddy, elasticsearch, frontend, kibana, logstash
elasticsearch  | Starting Elasticsearch...
elasticsearch  | Waiting for Elasticsearch to be ready...
elasticsearch  | Waiting for Elasticsearch...
elasticsearch  | Created elasticsearch keystore in /usr/share/elasticsearch/config/elasticsearch.keystore
elasticsearch  | CompileCommand: dontinline java/lang/invoke/MethodHandle.setAsTypeCache bool dontinline = true
elasticsearch  | CompileCommand: dontinline java/lang/invoke/MethodHandle.asTypeUncached bool dontinline = true
