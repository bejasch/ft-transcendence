#!/bin/sh

set -eu

die () {
	printf '\033[31mError: %s\033[m\n' "${1:-"Script $0 exited with unknown error"}"
	exit 1
}

toplevel=$(git rev-parse --show-toplevel)

cd -- "$toplevel"

grep_for_quotes () {
	case "$1" in
		(dquote)
			grep --color=auto --regexp='\(#\|//\|/\*\|\*/\).*[^=a-zA-Z0-9_]".*"' ;;
		(squote)
			grep --color=auto --regexp='\(#\|//\|/\*\|\*/\).*[^=a-zA-Z0-9_]'\''.*'\''' ;;
		(backtick)
			# shellcheck disable=SC2016
			grep --color=auto --regexp='\(#\|//\|/\*\|\*/\).*[^=a-zA-Z0-9_]`.*`' ;;
		(roff_squote)
			grep --color=auto --regexp='\(#\|//\|/\*\|\*/\).*[^=a-zA-Z0-9_]`.*'\''' ;;
		(roff_dquote)
			grep --color=auto --regexp='\(#\|//\|/\*\|\*/\).*[^=a-zA-Z0-9_]``.*'\'''\''' ;;
		(*)
			die 'Got invalid argument to function grep_for_quotes: "'"%1"'"' ;;
	esac
}


find_quotes () {
	exclude_lines_numbers=$1
	quote_type=$2

	case "$exclude_lines_numbers" in
		(true)
			first_grep_extra_args='--line-number' ;;
		(false)
			first_grep_extra_args='' ;;
		(*)
			die 'exclude_lines_numbers argument must be "true" or "false"' ;;
	esac

	case "$quote_type" in
		(dquote|squote|backtick|roff_squote|roff_dquote)
			;;
		(*)
			die 'First argument must be one of "dquote", "squote", "backtick", "roff_squote", or "roff_dquote" not "'"$1"'"' ;;
	esac

	grep \
		--exclude-from=script/quote_search_exclusions \
		--exclude-dir=node_modules   \
		--exclude-dir=.git           \
		--binary-files=without-match \
		--fixed-strings              \
		--dereference-recursive      \
		$first_grep_extra_args       \
		--regexp '#'  \
		--regexp '//' \
		--regexp '/*' \
		--regexp '*/' |
		grep \
			--file=script/quote_exceptions \
			--invert-match \
			--line-regexp \
			--fixed-strings |
			grep_for_quotes "$quote_type"
}

main () (
	minus_n=true
	option_parsing=true
	args=
	while [ -n "${1:-}" ]; do
		case "$1" in
			(-n)
				if [ "$option_parsing" = "true" ]; then minus_n=false; else args=$args,$1; fi ;;
			(--)
				if [ "$option_parsing" = "true" ]; then option_parsing=false; else args=$args,$1; fi ;;
			(-*)
				if [ "$option_parsing" = "true" ]; then die 'Unknown option: "%s"' "$1"; else args=$args,$1; fi ;;
			(*)
				args=$args,$1
		esac
		shift
	done
	args=${args#,}

	minus_n=false # Always disable showing line numbers, makes exceptions complicated...

	[ -n "$args" ] || die "Expected at least one quote type"

	IFS=,
	for quote_type in $args; do
		find_quotes "$minus_n" "$quote_type"
	done
)

main "$@"
