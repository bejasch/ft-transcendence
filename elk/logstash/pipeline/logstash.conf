input {
  # TCP input for receiving logs from pino-socket
  tcp {
    port => "${LOGSTASH_PORT:5050}"
    codec => json_lines {
      target => "[@metadata][json]"
    }
    tags => ["backend", "tcp"]
  }
  
  # UDP alternative (same port for simplicity)
  udp {
    port => "${LOGSTASH_PORT:5050}"
    codec => json_lines {
      target => "[@metadata][json]"
    }
    tags => ["backend", "udp"]
  }
}

filter {
  # Parse timestamps
  date {
    match => ["time", "ISO8601"]
    target => "@timestamp"
    remove_field => ["time"]
  }
  
  # Add host metadata
  mutate {
    add_field => {
      "[@metadata][index_name]" => "ft-transcendence-logs-%{+YYYY.MM.dd}"
    }
  }
  
  # Handle backend logs
  if "backend" in [tags] {
    # Structure user-related logs
    if [msg] =~ "user" or [message] =~ "user" {
      mutate {
        add_tag => ["user_activity"]
      }
    }
    
    # Structure game-related logs
    if [msg] =~ "game" or [message] =~ "game" {
      mutate {
        add_tag => ["game_activity"]
      }
    }
    
    # Structure error logs
    if [level] == "error" or [level] == "fatal" {
      mutate {
        add_tag => ["error"]
      }
    }
  }
  
  # Extract key information from logs
  grok {
    match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} %{GREEDYDATA:log_message}" }
  }
}

output {
  # Send everything to Elasticsearch
  elasticsearch {
    hosts => ["https://elasticsearch:${ELASTICSEARCH_PORT}"]
    ssl_enabled => true
    ssl_verification_mode => "full"
    ssl_certificate_authorities => ["/etc/logstash/config/certs/ca.crt"]
    user => "${LOGSTASH_USER}"
    password => "${LOGSTASH_PASSWORD}"
    index => "%{[@metadata][index_name]}"
    action => "index"
    document_type => "_doc"
    manage_template => false
    template_overwrite => false
    pool_max => 1000
    pool_max_per_route => 100
    failure_type_logging_whitelist => ["client", "server", "rejected"]
  }
  
  # For debugging
  if [level] == "debug" or "${DEBUG:false}" == "true" {
    stdout { 
      codec => rubydebug {
        metadata => true
      }
    }
  }
}
