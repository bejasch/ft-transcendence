input {
  # TCP input for receiving logs from pino-socket
  tcp {
    port => "${LOGSTASH_PORT:5050}"
    codec => json_lines
	tags => ["backend", "tcp"]
  }
  
  # UDP alternative (same port for simplicity)
  udp {
    port => "${LOGSTASH_PORT:5050}"
    codec => json_lines
	tags => ["backend", "udp"]
  }
}

filter {
  # Parse timestamps
  date {
    match => ["time", "ISO8601"]
    target => "@timestamp"
    remove_field => ["time"]
  }
  
  # Add host metadata
  mutate {
    add_field => {
      "[@metadata][index_name]" => "ft-transcendence-logs-%{+YYYY.MM.dd}"
    }
  }
  
  # Handle backend logs
  if "backend" in [tags] {
    # Structure user-related logs
    if [msg] =~ "user" or [message] =~ "user" {
      mutate {
        add_tag => ["user_activity"]
      }
    }
    
    # Structure game-related logs
    if [msg] =~ "game" or [message] =~ "game" {
      mutate {
        add_tag => ["game_activity"]
      }
    }
    
    # Structure error logs
    if [level] == "error" or [level] == "fatal" {
      mutate {
        add_tag => ["error"]
      }
    }
  }
  
  # Extract key information from logs
  grok {
    match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} %{GREEDYDATA:log_message}" }
  }
}

output {
  # Send everything to Elasticsearch
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "%{[@metadata][index_name]}"
	user => "${LOGSTASH_ES_USER:elastic}"
    password => "${LOGSTASH_ES_PASSWORD}"
    # For better performance with bulk indexing
    action => "index"
    document_type => "_doc"
    manage_template => false
    template_overwrite => false
  }
  
  # For debugging
  if [level] == "debug" and "${DEBUG:false}" == "true" {
    stdout { codec => rubydebug }
  }
}